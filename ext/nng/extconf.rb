# frozen_string_literal: true

require 'mkmf'

# This extconf.rb is used to capture gem install options
# It doesn't compile anything, just saves configuration

def save_config(config)
  config_file = File.join(__dir__, 'nng_config.rb')
  File.write(config_file, <<~RUBY)
    # frozen_string_literal: true
    # Auto-generated by extconf.rb during gem installation
    # DO NOT EDIT THIS FILE MANUALLY

    module NNG
      module InstallConfig
        CONFIG = #{config.inspect}
      end
    end
  RUBY
  puts "NNG configuration saved to #{config_file}"
end

# Parse installation options
config = {}

# --with-nng-dir=/path/to/nng
if nng_dir = with_config('nng-dir')
  config[:nng_dir] = nng_dir
  puts "Using NNG directory: #{nng_dir}"
end

# --with-nng-lib=/path/to/libnng.so
if nng_lib = with_config('nng-lib')
  config[:nng_lib] = nng_lib
  puts "Using NNG library: #{nng_lib}"
end

# --with-nng-include=/path/to/nng/include (for future use)
if nng_include = with_config('nng-include')
  config[:nng_include] = nng_include
  puts "Using NNG include directory: #{nng_include}"
end

# Save configuration
save_config(config)

# We don't actually compile anything since we use FFI
# Just create a dummy Makefile
File.write('Makefile', <<~MAKEFILE)
  .PHONY: all install clean

  all:
  \t@echo "NNG Ruby uses FFI, no compilation needed"

  install:
  \t@echo "NNG configuration saved"

  clean:
  \t@echo "Nothing to clean"
MAKEFILE

puts "\nNNG Ruby gem configuration complete!"
puts "No native compilation needed (using FFI)"
puts ""
if config.any?
  puts "Custom configuration:"
  config.each { |k, v| puts "  #{k}: #{v}" }
else
  puts "Using default bundled libnng.so.1.8.0"
end
